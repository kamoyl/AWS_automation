#!/usr/bin/env bash

START_AZURE_TIME=$(date +%s.%4N)

if [[ "${OSTYPE}" =~ "linux" ]]
then
  SCRIPT=$(readlink -f "$0")
elif [[ "${OSTYPE}" =~ "darwin" ]]
then
  SCRIPT=$(greadlink -f "$0")
else
  SCRIPT=$(readlink -f "$0")
fi

SCRIPTS_HOME=$(dirname "${SCRIPT}")

PARAMETERS=$(echo "$@" | sed 's/\-l .//g')

if [ $(caller | awk '{print $1}') -eq 0 ]
then
  CALLING=0
  source "${SCRIPTS_HOME}/config"
  echo -e "${BLUE}${datestring} EXECUTE: ${YELLOW}[ ${LIME}$0 ${PARAMETERS} ${YELLOW} ]${RESET}"
else
  CALLING=1
  if [[ ${VERBOSE} == yes ]]
  then
    debug "${YELLOW}[ ${LIME}$(echo $(caller | awk '{print $2}') | awk -F\/ '{print $NF}') ${YELLOW}calls (in line: ${LIME}$(caller | awk '{print $1}')${YELLOW}) ${LIME}$(echo ${BASH_SOURCE} | awk -F\/ '{print $NF}') ${PARAMETERS} ${YELLOW} ]"
  fi
fi

usage()
{
echo "
${CYAN}Usage:${BRIGHT}${WHITE}
$0 [-o DIRECTORY] -v [-O OWNER_ID] [-C]

    ${NORMAL}${CYAN}This script checks and looks for difference between repositories and
        ENV - and take some actions later on, producting report of what has been done${BLUE}
    ${LIME}-o${BLUE}  OUTPUT directory - where to store ALL LOGs and TEMP files
        (default directory is: ${CYAN}${HOME}/var${BLUE} and TMP and LOG are subdirectories to var)
    ${LIME}-C${BLUE}  CLEANING (${WINE}WARNING${BLUE}) - removing all running/stopped instance(s) (terminates them) and all volumes
    ${LIME}-x${BLUE}  only works with [-C] - CLEANING (${RED}WARNING${BLUE}) - removes: S3 buckets (only empty), Lambda functions, events-busses etc.
    ${LIME}-v${BLUE}  verbose${RESET}"
    1>&2;
    exit 1
}

VERBOSE=no
REDEPLOYMENT=no
CLEANING=no
XTRA_CLEANING=no
while getopts ":o:vCx" ARG
do
  case "${ARG}" in
        v)
            VERBOSE=yes
            ;;
        C)
            CLEANING=yes
            ;;
        x)  XTRA_CLEANING=yes
            ;;
        o)
            o=${OPTARG}
            ;;
        *)
            usage
            ;;
    esac
done
shift $((OPTIND-1))

if [ ${CALLING} -eq 0 ]
then
  source "${SCRIPTS_HOME}/var_management"
fi

if [[ ${CURRENT_DAY} == 01 ]] && [[ ${CURRENT_MONTH} == 01 ]]
then
  CURRENT_MONTH_COSTS="0"
  CURRENT_YEAR_COSTS="0"
elif [[ ${CURRENT_DAY} == 01 ]]
then
  CURRENT_MONTH_COSTS="0"
  CURRENT_YEAR_COSTS=${CURRENT_YEAR_COSTS%.*}
else
  CURRENT_MONTH_COSTS=${CURRENT_MONTH_COSTS%.*}
  CURRENT_YEAR_COSTS=${CURRENT_YEAR_COSTS%.*}
fi

AZ_SUBNETS_DETAILS="az_subnets_${CURRENT_TIMESTAMP}"
AZ_ACCOUNT="${AWS_NAMES_PREFIX}_account_${CURRENT_TIMESTAMP}"
AZ_RGROUP_DETAILS="az_resource_group_${CURRENT_TIMESTAMP}"
AZ_NAT_GWS="az_nat_gws_${CURRENT_TIMESTAMP}"
AZ_SECURITY_GROUPS="az_security-groups_${CURRENT_TIMESTAMP}"
az network vnet list > "${TMP}/${AZ_SUBNETS_DETAILS}_full.json" 2>"${LOG}/${AZ_SUBNETS_DETAILS}.log" &
az group list > "${TMP}/${AZ_RGROUP_DETAILS}_full.json" 2>"${LOG}/${AZ_RGROUP_DETAILS}.log" &
az network nsg list > "${TMP}/${AZ_SECURITY_GROUPS}_full.json" 2>"${LOG}/${AZ_SECURITY_GROUPS}.log" &
#az network application-gateway list > "${TMP}/${AZ_AGWS}_full.json" 2>"${LOG}/${AZ_AGWS}.log" &
az network nat gateway list > "${TMP}/${AZ_NAT_GWS}_full.json" 2>"${LOG}/${AZ_NAT_GWS}.log" & 
az account list > "${TMP}/${AZ_ACCOUNT}_full.json"  2>"${LOG}/${AZ_ACCOUNT}.log" &
az storage account list
wait
if [ ! -z $(jq -r '.[]' "${TMP}/${AZ_ACCOUNT}_full.json" | head -n1) ]
then
  ACCOUNT_ID="$(jq -r '.[].id' "${TMP}/${AZ_ACCOUNT}_full.json")"
  ACCOUNT_NAME="$(jq -r '.[].name' "${TMP}/${AZ_ACCOUNT}_full.json")"
  ACCOUNT_USER_NAME="$(jq -r '.[].user.name' "${TMP}/${AZ_ACCOUNT}_full.json")"
fi

if [ ! -z $(jq -r '.[]' "${TMP}/${AZ_SUBNETS_DETAILS}_full.json" | head -n1) ]
then
  jq -r '.[].name' "${TMP}/${AZ_SUBNETS_DETAILS}_full.json"
  jq -r '.[].id' "${TMP}/${AZ_SUBNETS_DETAILS}_full.json"
fi
#deployment of vm:
#az upgrade --all -y

RANDOM_ID=$(head -n10 /dev/urandom | tr -dc '0-9a-zA-Z' | fold -w 4 | head -n1)

for RESOURCE_GROUP in $(az group list | jq -r '.[].id' | awk -F\/ '{print $NF}')
do
  inf "resource group: ${ORANGE}${RESOURCE_GROUP}:"
  COMMON_PREFIX="${AWS_COMMON_NAME}_${RANDOM_ID}_${RESOURCE_GROUP}"
  AZ_RG_VNET="${COMMON_PREFIX}_vnet"
  AZ_RG_SUBNET="${COMMON_PREFIX}_subnet"
  AZ_RG_NAT_GW="${COMMON_PREFIX}_nat_gw"
  AZ_RG_NSG="${COMMON_PREFIX}_nsg"
  if [ ! -z $(jq -r '.[]' "${TMP}/${AZ_SUBNETS_DETAILS}_full.json" | head -n1) ]
  then
    az network vnet subnet list --resource-group ${RESOURCE_GROUP} --vnet-name ${AZ_RG_VNET}
    az network vnet list-available-ips --resource-group ${RESOURCE_GROUP} --name ${AZ_RG_VNET}
    #az network vnet list-endpoint-services
  else

    debug "  creating vnet: ${YELLOW}${AZ_RG_VNET}${BLUE} in RG: ${BROWN}${RESOURCE_GROUP}"
    az network vnet create --resource-group ${RESOURCE_GROUP} --name ${AZ_RG_VNET} > "${TMP}/${AZ_RG_VNET}_create.json" 2>"${LOG}/${AZ_RG_VNET}_create.log"
    ERROR_CODE="$?"
    if [ ${ERROR_CODE} -eq 0 ]
    then
      debug "    creating vnet: ${YELLOW}${AZ_RG_VNET}${BLUE} in RG: ${BROWN}${RESOURCE_GROUP}${BLUE} properly done"
    else
      error "    creating vnet: ${YELLOW}${AZ_RG_VNET}${RED} in RG: ${BROWN}${RESOURCE_GROUP}${RED} failed, exiting"
      failed
    fi
    
    debug "  creating nat gateway: ${DARK_GREEN}${AZ_RG_NAT_GW}${BLUE} in RG: ${BROWN}${RESOURCE_GROUP}"
    az network nat gateway create --resource-group ${RESOURCE_GROUP} --name ${AZ_RG_NAT_GW} --idle-timeout 4 > "${TMP}/${AZ_RG_NAT_GW}_create.json" 2>"${LOG}/${AZ_RG_NAT_GW}_create.log"
    ERROR_CODE="$?"
    if [ ${ERROR_CODE} -eq 0 ]
    then
      debug "    creating nat gateway: ${DARK_GREEN}${AZ_RG_NAT_GW}${BLUE} in RG: ${BROWN}${RESOURCE_GROUP}${BLUE} properly done"
    else
      error "    creating nat gateway: ${DARK_GREEN}${AZ_RG_NAT_GW}${RED} in RG: ${BROWN}${RESOURCE_GROUP}${RED} failed, exiting"
      failed
    fi

    debug "      creating subnet: ${LIME}${AZ_RG_SUBNET}${BLUE} in vnet: ${YELLOW}${AZ_RG_VNET}${BLUE}, with nat gateway: ${DARK_GREEN}${AZ_RG_NAT_GW}"
    az network vnet subnet create --resource-group ${RESOURCE_GROUP} --vnet-name ${AZ_RG_VNET} --nat-gateway ${AZ_RG_NAT_GW} --name ${AZ_RG_SUBNET}  --address-prefixes "10.0.1.0/24" > "${TMP}/${AZ_RG_SUBNET}_create.json" 2>"${LOG}/${AZ_RG_SUBNET}_create.log"
    ERROR_CODE="$?"
    if [ ${ERROR_CODE} -eq 0 ]
    then
      debug "        creating subnet: ${LIME}${AZ_RG_SUBNET}${BLUE} properly done"
    else
      error "        creating subnet: ${LIME}${AZ_RG_SUBNET}${BLUE} failed, exiting"
      failed
    fi

    debug "  creating security group: ${LIGHT_YELLOW}${AZ_RG_NSG}"
    az network nsg create --resource-group ${RESOURCE_GROUP} --name ${AZ_RG_NSG} > "${TMP}/${AZ_RG_NSG}_create.json" 2>"${LOG}/${AZ_RG_NSG}_create.log"
    ERROR_CODE="$?"
    if [ ${ERROR_CODE} -eq 0 ]
    then
      debug "    creating security group: ${LIGHT_YELLOW}${AZ_RG_NSG}${BLUE} in RG: ${BROWN}${RESOURCE_GROUP}${BLUE} properly done"
    else
      error "    creating security group: ${LIGHT_YELLOW}${AZ_RG_NSG}${RED} in RG: ${BROWN}${RESOURCE_GROUP}${RED} failed, exiting"
      failed
    fi

    debug "      Adding an SSH rule, from ${GREEN}${DEFAULT_INET_IP}/32${BLUE} to security group: ${LIGHT_YELLOW}${AZ_RG_NSG}"
    az network nsg rule create --resource-group ${RESOURCE_GROUP} --nsg-name ${AZ_RG_NSG} --name default_ssh --priority 100 --source-address-prefixes ${DEFAULT_INET_IP}/32 --source-port-ranges 22 --destination-address-prefixes '*' --destination-port-ranges 22 --access Allow --protocol Tcp --description "Default access by ssh" > "${TMP}/${AZ_RG_NSG}_ssh_rule.json" 2>"${LOG}/${AZ_RG_NSG}_ssh_rule.log"
    ERROR_CODE="$?"
    if [ ${ERROR_CODE} -eq 0 ]
    then
      debug "        Adding an SSH rule, from ${GREEN}${DEFAULT_INET_IP}/32${BLUE} to security group: ${LIGHT_YELLOW}${AZ_RG_NSG}${BLUE} properly done"
    else
      error "        Adding an SSH rule, from ${GREEN}${DEFAULT_INET_IP}/32${BLUE} to security group: ${LIGHT_YELLOW}${AZ_RG_NSG}${RED} failed, exiting"
      failed
    fi
  fi

  #deleting 
  debug "deleting nsg: ${LIGHT_YELLOW}${AZ_RG_NSG}"
  az network nsg delete --resource-group ${RESOURCE_GROUP} --name ${AZ_RG_NSG}
  debug "deleting subnet: ${LIME}${AZ_RG_SUBNET}"
  az network vnet subnet delete --name ${AZ_RG_SUBNET} --resource-group ${RESOURCE_GROUP} --vnet-name ${AZ_RG_VNET}
  debug "deleting nat gateway: ${DARK_GREEN}${AZ_RG_NAT_GW}"
  az network nat gateway delete --resource-group ${RESOURCE_GROUP} --name ${AZ_RG_NAT_GW}
  debug "deleting vnet: ${YELLOW}${AZ_RG_VNET}"
  az network vnet delete --resource-group ${RESOURCE_GROUP} --name ${AZ_RG_VNET}
done
