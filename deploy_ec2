#!/usr/bin/env bash

#AWS EC2: security groups
if [ -s "${TMP}/${AWS_SECURITY_GROUPS}_full.json" ]
then
  inf ""
  inf "${MAGENTA}Checking if security group ${BROWN}${SECURITY_GROUP_EC2_NAME}${MAGENTA} exists"
  SECURITY_GROUP_ID=$(jq -r --arg security_group_name ${SECURITY_GROUP_EC2_NAME} '.SecurityGroups[] | select(.GroupName == $security_group_name) | .GroupId' "${TMP}/${AWS_SECURITY_GROUPS}_full.json")
  if [ ! -z ${SECURITY_GROUP_ID} ]
  then
    warn "  Security group: ${BROWN}${SECURITY_GROUP_EC2_NAME}${WINE} already exists"
    SECURITY_GROUP_EXISTS="yes"
  else
    aws_ec2_security_group_create "${SECURITY_GROUP_EC2_NAME}"
    aws ${AWS_PROFILE_USE_CHECK[*]} ec2 describe-security-groups > "${TMP}/${AWS_SECURITY_GROUPS}_full.json"
  fi
fi

#AWS EC2: security groups
END_DEPLOY_TIME=$(date +%s.%4N)
DEPLOY_TIME=$(echo "scale=4; x=(${END_DEPLOY_TIME} - ${START_DEPLOY_TIME}); if(x<1) print 0; x" | bc)

START_DEPLOY_INSTANCE_TIME=$(date +%s.%4N)
inf ""
aws_instance_create ${AWS_AMI_ID} ${AWS_INSTANCE_TYPE} ${KEY_NAME} ${SUBNET_ID}  ${SECURITY_GROUP_ID}
aws_instance_monitoring ${AWS_INSTANCE_DETAILS_ID}
sleep 2
#ToDo: aws ${AWS_PROFILE_USE_CHECK[*]} ec2 modify-instance-attribute --instance-id ${AWS_INSTANCE_DETAILS_ID} --block-device-mappings "[{\"DeviceName\": \"/dev/sda1\",\"Ebs\":{\"DeleteOnTermination\":true}}]"
END_DEPLOY_INSTANCE_TIME=$(date +%s.%4N)
AWS_START_VM_TIME=$(echo "scale=4; x=(${END_DEPLOY_INSTANCE_TIME} - ${START_DEPLOY_INSTANCE_TIME}); if(x<1) print 0; x" | bc)
START_READY_INSTANCE_TIME=$(date +%s.%4N)
if [ -z ${AWS_INSTANCE_DETAILS_PUBLIC_IP} ] || [[ ${AWS_INSTANCE_DETAILS_PUBLIC_IP} == "null" ]]
then
  inf "  Instance: ${YELLOW}${AWS_INSTANCE_DETAILS_ID}${CYAN} with private IP: ${LIME}${AWS_INSTANCE_DETAILS_IP}${CYAN} has just been created"
else
  inf "  Instance: ${YELLOW}${AWS_INSTANCE_DETAILS_ID}${CYAN} with private IP: ${LIME}${AWS_INSTANCE_DETAILS_IP}${CYAN} (public IP: ${GREEN}${AWS_INSTANCE_DETAILS_PUBLIC_IP}${CYAN}) has just been created"
fi
inf "    ${MAGENTA}Checking if ${YELLOW}${DEFAULT_INET_IP}${MAGENTA} may log in by ssh to instance: ${YELLOW}${AWS_INSTANCE_DETAILS_ID}"
#SECURITY_GROUP_INGRESS_FOR_LOCAL_IP=$(jq -r --arg default_inet_ip ${DEFAULT_INET_IP} '.SecurityGroups[].IpPermissions[].IpRanges[] | select(.CidrIp | startswith($default_inet_ip)) | .CidrIp' "${TMP}/${AWS_SECURITY_GROUPS}_full.json")
#if [ -z ${SECURITY_GROUP_INGRESS_FOR_LOCAL_IP} ]
#then
#  aws_security_group_ingress_add ${SECURITY_GROUP_ID} "${DEFAULT_INET_IP}/32"
#fi
if [ ! -z ${EXTERNAL_INET_IP} ]
then
  if [[ ${EXTERNAL_INET_IP} =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]
  then
    aws_security_group_ingress_add ${SECURITY_GROUP_ID} "${EXTERNAL_INET_IP}/32"
  fi
fi
for SOURCE_NETWORK in ${SOURCE_NETWORKS[*]}
do
  (
  SECURITY_GROUP_INGRESS_SOURCE_NETWORK=$(jq -r --arg source_network ${SOURCE_NETWORK} '.SecurityGroups[].IpPermissions[].IpRanges[] | select(.CidrIp | startswith($source_network)) | .CidrIp' "${TMP}/${AWS_SECURITY_GROUPS}_full.json" | sort -u)
  if [ -z ${SECURITY_GROUP_INGRESS_SOURCE_NETWORK} ]
  then
    aws_security_group_ingress_add ${SECURITY_GROUP_ID} "${SOURCE_NETWORK}"
  else
    warn "      Source network: ${LIME}${SOURCE_NETWORK}${WINE} has already been added to security group: ${YELLOW}${SECURITY_GROUP_ID}"
  fi
  ) &
done
inf "    ${MAGENTA}Checking if ${YELLOW}${SECURITY_GROUP_EC2_NAME}${MAGENTA} has proper egress configuration"
for EGRESS_ENTRY in ${AWS_EGRESS_LIST[*]}
do
  (
    aws_security_group_egress_add ${SECURITY_GROUP_ID} "${EGRESS_ENTRY}"
  ) &
done
associating_instance-to-profile ${AWS_INSTANCE_DETAILS_ID} "${AWS_EC2_INSTANCES_PROFILE}"
wait
AWS_INSTANCE_PROFILES_ASSOCIATION_ID=$(jq -r '.IamInstanceProfileAssociation.AssociationId' "${TMP}/${AWS_INSTANCE_PROFILES_ASSOCIATIONS}_${AWS_INSTANCE_DETAILS_ID}_profile_association.json")
is_instance_up ${AWS_INSTANCE_DETAILS_ID}
END_READY_INSTANCE_TIME=$(date +%s.%4N)
AWS_READY_VM_TIME=$(echo "scale=4; x=(${END_READY_INSTANCE_TIME} - ${START_READY_INSTANCE_TIME}); if(x<1) print 0; x" | bc)

aws ${AWS_PROFILE_USE_CHECK[*]} ec2 describe-instances --instance-ids ${AWS_INSTANCE_DETAILS_ID} > "${TMP}/${AWS_INSTANCES_DETAILS}_full.json"
AWS_VOLUME_ID=$(jq -r '.Reservations[].Instances[].BlockDeviceMappings[].Ebs.VolumeId' "${TMP}/${AWS_INSTANCES_DETAILS}_full.json")
if [[ -z ${A} ]]
then
  inf "        Cloning ${BROWN}${AWS_REPO_ADDRESS}"
  ssh -o "StrictHostKeyChecking no" -n -f ${DEPLOY_USER}@${AWS_INSTANCE_DETAILS_IP} "sh -c 'git clone ${AWS_REPO_ADDRESS} > /dev/null 2>&1'"
  ERROR_CODE="$?"
  ###################
  if [[ ${RUN_SCRIPT} == yes ]]
  then
    REPO=""
    REPO_BRANCH=""
    SCRIPT_NAME=""
    SCRIPT_PARAMETERS=""
    aws_run_EC2_code ${REPO} ${REPO_BRANCH} ${SCRIPT_NAME} "${SCRIPT_PARAMETERS}"
    aws_instance_removal ${AWS_INSTANCE_DETAILS_ID}
  fi
  ###################
fi
