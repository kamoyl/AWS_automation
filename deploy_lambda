#!/usr/bin/env bash

#AWS IAM LAMBDA: role
if [ -s "${TMP}/${AWS_ROLES}_full.json" ]
then
  inf ""
  inf "${MAGENTA}Checking if appropriate role (${YELLOW}${AWS_EC2_LAMBDA_ROLE}${MAGENTA}) for LAMBDA service exists"
  AWS_EC2_LAMBDA_ROLE_CHECK=$(jq -r --arg ec2_lambda_role ${AWS_EC2_LAMBDA_ROLE} '.Roles[] | select(.RoleName == $ec2_lambda_role) | .RoleName' "${TMP}/${AWS_ROLES}_full.json")
  if [ ! -z ${AWS_EC2_LAMBDA_ROLE_CHECK} ]
  then
    inf "  Role ${YELLOW}${AWS_EC2_LAMBDA_ROLE}${CYAN} exists"
    export EC2_LAMBDA_ROLE_ARN=$(jq -r --arg ec2_lambda_role ${AWS_EC2_LAMBDA_ROLE} '.Roles[] | select(.RoleName == $ec2_lambda_role) | .Arn' "${TMP}/${AWS_ROLES}_full.json")
  else
    warn "  Role ${YELLOW}${AWS_EC2_LAMBDA_ROLE}${WINE} doesn't exist"
    aws_role_create ${AWS_EC2_LAMBDA_ROLE} lambda
  fi
fi
#AWS IAM LAMBDA: roles

#AWS IAM LAMBDA: policy
if [ -s "${TMP}/${AWS_POLICIES}_${AWS_NAMES_PREFIX}_full.json" ]
then
  inf ""
  inf "${MAGENTA}Checking if appropriate policy (${DARK_GREEN}${AWS_EC2_LAMBDA_POLICY}${MAGENTA}) for LAMBDA service exists"
  NAMED_POLICY_ARN=$(jq -r --arg prefixed_policy_name ${AWS_EC2_LAMBDA_POLICY} 'select(.PolicyName == $prefixed_policy_name) | .Arn' "${TMP}/${AWS_POLICIES}_${AWS_NAMES_PREFIX}_full.json")
  if [ -z ${NAMED_POLICY_ARN} ]
  then
    warn "  Policy ${DARK_GREEN}${AWS_EC2_LAMBDA_POLICY}${WINE} doesn't exist"
    aws_lambda_policy_create ${AWS_EC2_LAMBDA_POLICY}
    NAMED_POLICY_ARN="$(jq -r '.Policy.Arn' "${TMP}/${AWS_POLICIES}_${AWS_EC2_LAMBDA_POLICY}_creation.json")"
    aws_attaching_policy_to_role ${AWS_EC2_LAMBDA_ROLE} "${NAMED_POLICY_ARN}"
  else
    inf "  Policy ${DARK_GREEN}${AWS_EC2_LAMBDA_POLICY}${CYAN} exists"
    NAMED_ROLE_NAME=$(aws ${AWS_PROFILE_USE_CHECK[*]} iam list-entities-for-policy --policy-arn "${NAMED_POLICY_ARN}" | jq -r '.PolicyRoles[].RoleName' | grep ${AWS_EC2_LAMBDA_ROLE})
    if [ -z ${NAMED_ROLE_NAME} ]
    then
      aws_attaching_policy_to_role ${AWS_EC2_LAMBDA_ROLE} "${NAMED_POLICY_ARN}"
    else
      inf "    Policy: ${DARK_GREEN}${AWS_EC2_LAMBDA_POLICY}${CYAN} is already attached to role: ${YELLOW}${AWS_EC2_LAMBDA_ROLE}"
    fi
  fi
else
  warn "  Policy ${DARK_GREEN}${AWS_EC2_LAMBDA_POLICY}${WINE} doesn't exist"
  aws_lambda_policy_create ${AWS_EC2_LAMBDA_POLICY}
  NAMED_POLICY_ARN="$(jq -r '.Policy.Arn' "${TMP}/${AWS_POLICIES}_${AWS_EC2_LAMBDA_POLICY}_creation.json")"
  aws_attaching_policy_to_role ${AWS_EC2_LAMBDA_ROLE} "${NAMED_POLICY_ARN}"
fi
#AWS IAM LAMBDA: policy

#AWS LAMBDA: security groups
if [ -s "${TMP}/${AWS_SECURITY_GROUPS}_full.json" ]
then
  inf ""
  inf "${MAGENTA}Checking if security group ${YELLOW}${SECURITY_GROUP_LAMBDA_NAME}${MAGENTA} exists"
  SECURITY_GROUP_ID=$(jq -r --arg security_group_name ${SECURITY_GROUP_LAMBDA_NAME} '.SecurityGroups[] | select(.GroupName == $security_group_name) | .GroupId' "${TMP}/${AWS_SECURITY_GROUPS}_full.json")
  if [ ! -z ${SECURITY_GROUP_ID} ]
  then
    warn "  Security group: ${BROWN}${SECURITY_GROUP_LAMBDA_NAME}${WINE} already exists"
    SECURITY_GROUP_EXISTS="yes"
  else
    aws_ec2_security_group_create "${SECURITY_GROUP_LAMBDA_NAME}"
    aws ${AWS_PROFILE_USE_CHECK[*]} ec2 describe-security-groups > "${TMP}/${AWS_SECURITY_GROUPS}_full.json"
  fi
fi
inf "    ${MAGENTA}Checking if ${YELLOW}${SECURITY_GROUP_LAMBDA_NAME}${MAGENTA} has proper ingress configuration"
for SOURCE_NETWORK in ${SOURCE_NETWORKS[*]}
do
  (
  SECURITY_GROUP_INGRESS_SOURCE_NETWORK=$(jq -r --arg source_network ${SOURCE_NETWORK} '.SecurityGroups[].IpPermissions[].IpRanges[] | select(.CidrIp | startswith($source_network)) | .CidrIp' "${TMP}/${AWS_SECURITY_GROUPS}_full.json")
  if [ -z ${SECURITY_GROUP_INGRESS_SOURCE_NETWORK} ]
  then
    aws_security_group_ingress_add ${SECURITY_GROUP_ID} "${SOURCE_NETWORK}"
  else
    warn "      Source network: ${LIME}${SOURCE_NETWORK}${WINE} has already been added to security group: ${YELLOW}${SECURITY_GROUP_ID}"
  fi
  ) &
done
if [ ! -z ${EXTERNAL_INET_IP} ]
then
  if [[ ${EXTERNAL_INET_IP} =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]
  then
    aws_security_group_ingress_add ${SECURITY_GROUP_ID} "${EXTERNAL_INET_IP}/32"
  fi
fi
inf "    ${MAGENTA}Checking if ${YELLOW}${SECURITY_GROUP_LAMBDA_NAME}${MAGENTA} has proper egress configuration"
aws_security_group_egress_add ${SECURITY_GROUP_ID}
wait
#AWS LAMBDA: security groups
END_DEPLOY_TIME=$(date +%s.%4N)
DEPLOY_TIME=$(echo "scale=4; x=(${END_DEPLOY_TIME} - ${START_DEPLOY_TIME}); if(x<1) print 0; x" | bc)

START_DEPLOY_LAMBDA_TIME=$(date +%s.%4N)
#AWS Lambda deployment
#ToDo: prepare the whole package for python things
if [ -s "${TMP}/${AWS_ROLES}_${AWS_EC2_LAMBDA_ROLE}_creation.json" ]
then
  export EC2_LAMBDA_ROLE_ARN=$(jq -r '.Role.Arn' "${TMP}/${AWS_ROLES}_${AWS_EC2_LAMBDA_ROLE}_creation.json")
fi

IFS=${NEWIFS}
for LAMBDA_SCRIPT_LINE in $(cat "${SCRIPTS_HOME}/lambda_functions/lambda_events.config" | grep -v "^#")
do
  LAMBDA_SCRIPT=$(echo "${LAMBDA_SCRIPT_LINE}" | awk -F\~ '{print $1}')
  LAMBDA_SCRIPT_NAME=$(echo ${LAMBDA_SCRIPT} | awk -F\. '{print $1}')
  SHELL_SCRIPT=$(echo "${LAMBDA_SCRIPT_LINE}" | awk -F\~ '{print $2}')
  SHELL_SCRIPT_NAME=$(echo ${SHELL_SCRIPT} | awk -F\. '{print $1}')
  SHELL_SCRIPT_CONTENT=$(cat "${SCRIPTS_HOME}/lambda_functions/${SHELL_SCRIPT}")
  RANDOM_ID_GEN=$(head -n10 /dev/urandom | tr -dc '0-9a-zA-Z' | fold -w 4 | head -n1)
  AWS_LAMBDA_NAME="${AWS_COMMON_NAME}_${SHELL_SCRIPT_NAME}_${LAMBDA_SCRIPT_NAME}"
  AWS_HANDLER_FUNCTION_NAME="${LAMBDA_SCRIPT_NAME}_handler"
  AWS_LAMBDA_HANDLER="${AWS_LAMBDA_NAME}.${AWS_HANDLER_FUNCTION_NAME}"
  export SHELL_SCRIPT_CONTENT
  export KEY_NAME
  export AWS_EC2_INSTANCES_PROFILE
  export AWS_HANDLER_FUNCTION_NAME
  export AWS_AMI_ID
  export AWS_INSTANCE_TYPE
  export SUBNET_ID
  export REGION
  export SECURITY_GROUP_ID
  inf "${MAGENTA}Checking if Lambda function (${BLUE}${AWS_LAMBDA_NAME}${MAGENTA}) exists"
  lambda_function_deployment ${AWS_LAMBDA_NAME} ${AWS_HANDLER_FUNCTION_NAME}
  EVENT_TARGET_ID="Id=${RANDOM_ID_GEN},Arn=${EC2_LAMBDA_SCRIPT_ARN}"
  
  EVENT_SCHEDULE=$(echo "${LAMBDA_SCRIPT_LINE}" | awk -F\~ '{print $3}')
  if [ -z ${EVENT_SCHEDULE} ]
  then
    warn "    Lambda function: ${YELLOW}${AWS_LAMBDA_NAME}${WINE} is configured without schedule"
  else
    if [[ ${EVENT_SCHEDULE} =~ ^cron.* ]]
    then
      SCHEDULE_DAY_OF_WEEK=$(echo ${EVENT_SCHEDULE} | awk -F\( '{print $2}' | awk '{print $5}')
      SCHEDULE_DAY_OF_MONTH=$(echo ${EVENT_SCHEDULE} | awk -F\( '{print $2}' | awk '{print $3}')
      if [[ ${SCHEDULE_DAY_OF_WEEK} == "?" ]] || [[ ${SCHEDULE_DAY_OF_WEEK} == "*" ]]
      then
        if [[ ${SCHEDULE_DAY_OF_MONTH} == "?" ]] || [[ ${SCHEDULE_DAY_OF_MONTH} == "*" ]]
        then
          EVENT_BRIDGE_RULE_NAME="$(echo ${EVENT_SCHEDULE} | awk -F\( '{print $2}' | awk '{print "HOUR_"$2"_MIN_"$1}' | sed 's/,/-/g')_lambda_rule"
          EVENT_BRIDGE_EVENT_NAME="$(echo ${EVENT_SCHEDULE} | awk -F\( '{print $2}' | awk '{print "HOUR_"$2"_MIN_"$1}' | sed 's/,/-/g')_lambda_event"
        else
          EVENT_BRIDGE_RULE_NAME="$(echo ${EVENT_SCHEDULE} | awk -F\( '{print $2}' | awk '{print "HOUR_"$2"_MIN_"$1"_MONTH_"$3}' | sed 's/,/-/g')_lambda_rule"
          EVENT_BRIDGE_EVENT_NAME="$(echo ${EVENT_SCHEDULE} | awk -F\( '{print $2}' | awk '{print "HOUR_"$2"_MIN_"$1"_MONTH_"$3}' | sed 's/,/-/g')_lambda_event"
        fi
      else
        if [[ ${SCHEDULE_DAY_OF_MONTH} == "?" ]] || [[ ${SCHEDULE_DAY_OF_MONTH} == "*" ]]
        then
          EVENT_BRIDGE_RULE_NAME="$(echo ${EVENT_SCHEDULE} | awk -F\( '{print $2}' | awk '{print "HOUR_"$2"_MIN_"$1"_DAY_"$5}' | sed 's/,/-/g')_lambda_rule"
          EVENT_BRIDGE_EVENT_NAME="$(echo ${EVENT_SCHEDULE} | awk -F\( '{print $2}' | awk '{print "HOUR_"$2"_MIN_"$1"_DAY_"$5}' | sed 's/,/-/g')_lambda_event"
        else
          EVENT_BRIDGE_RULE_NAME="$(echo ${EVENT_SCHEDULE} | awk -F\( '{print $2}' | awk '{print "HOUR_"$2"_MIN_"$1"_DAY_"$5"_MONTH_"$3}' | sed 's/,/-/g')_lambda_rule"
          EVENT_BRIDGE_EVENT_NAME="$(echo ${EVENT_SCHEDULE} | awk -F\( '{print $2}' | awk '{print "HOUR_"$2"_MIN_"$1"_DAY_"$5"_MONTH_"$3}' | sed 's/,/-/g')_lambda_event"
        fi
      fi
    elif [[ ${EVENT_SCHEDULE} =~ ^rate.* ]]
    then
      EVENT_SCHEDULE_RATE="$(echo ${EVENT_SCHEDULE} | awk -F\( '{print $2}' | awk '{print $1}')"
      EVENT_SCHEDULE_RANGE="$(echo ${EVENT_SCHEDULE} | awk -F\( '{print $2}' | awk '{print $2}' | awk -F\) '{print $1}')"
      EVENT_BRIDGE_RULE_NAME="every${EVENT_SCHEDULE_RATE}${EVENT_SCHEDULE_RANGE}_lambda_rule"
      EVENT_BRIDGE_EVENT_NAME=$(echo ${EVENT_BRIDGE_RULE_NAME} | sed 's/_rule/_event/g')
    fi
    if compgen -G "${TMP}/${AWS_EVENTS_RULES}_${EVENT_BRIDGE_RULE_NAME}"*_targets_full.json >/dev/null
    then
      if grep -q "${EC2_LAMBDA_SCRIPT_ARN}" "${TMP}/${AWS_EVENTS_RULES}_${EVENT_BRIDGE_RULE_NAME}"*_targets_full.json 2>/dev/null
      then
        inf "    ${WINE}Target: ${GREEN}${EC2_LAMBDA_SCRIPT_ARN}${WINE} is already added to rule:"
        for TARGET_IN_RULE in $(grep -l "${EC2_LAMBDA_SCRIPT_ARN}" "${TMP}/${AWS_EVENTS_RULES}_${EVENT_BRIDGE_RULE_NAME}"*_targets_full.json | awk -F\/ '{print $NF}' | sed "s/${AWS_EVENTS_RULES}_//g;s/_targets_full.json//g")
        do
          inf "      ${BLUE}${TARGET_IN_RULE}"
          lambda_add_permission_to_trust_principal ${AWS_LAMBDA_NAME} ${EVENT_BRIDGE_EVENT_NAME} events.amazonaws.com ${EVENT_BRIDGE_RULE_NAME}
        done
      else
        if [ -s "${TMP}/${AWS_EVENTS_RULES}_target_amount.csv" ]
        then
          FIRST_LINE_WITH_RULE_READY_FOR_TARGET=$(awk -F\~ '{if($2<5)print $0}' "${TMP}/${AWS_EVENTS_RULES}_target_amount.csv" | grep "^${EVENT_BRIDGE_RULE_NAME}" | head -n1 | awk -F\~ '{print $1}')
          if [ -z ${FIRST_LINE_WITH_RULE_READY_FOR_TARGET} ]
          then
            EVENT_BRIDGE_RULE_NAME_OLD=${EVENT_BRIDGE_RULE_NAME}
            EVENT_BRIDGE_RULE_NAME_NEW=${EVENT_BRIDGE_RULE_NAME}_${RANDOM_ID_GEN}
            EVENT_BRIDGE_RULE_NAME=${EVENT_BRIDGE_RULE_NAME_NEW}
            EVENT_BRIDGE_EVENT_NAME_NEW=$(echo ${EVENT_BRIDGE_RULE_NAME} | sed 's/_rule/_event/g')
            EVENT_BRIDGE_EVENT_NAME=${EVENT_BRIDGE_EVENT_NAME_NEW}
            warn "    Target: ${GREEN}${EC2_LAMBDA_SCRIPT_ARN}${CYAN} cannot be added to rule: ${LIME}${EVENT_BRIDGE_RULE_NAME_OLD}${WINE} due to quota"
            events_create_cron_rule ${EVENT_BRIDGE_RULE_NAME} "${EVENT_SCHEDULE}"
            events_list_of_rules
            lambda_add_permission_to_trust_principal ${AWS_LAMBDA_NAME} ${EVENT_BRIDGE_EVENT_NAME} events.amazonaws.com ${EVENT_BRIDGE_RULE_NAME}
            events_add_target_to_rule ${EVENT_TARGET_ID} ${EVENT_BRIDGE_RULE_NAME}
            events_list_of_all_targets
            wait
          else
            #echo "target: ${EC2_LAMBDA_SCRIPT_ARN} will be added to rule: ${FIRST_LINE_WITH_RULE_READY_FOR_TARGET}"
            EVENT_BRIDGE_EVENT_NAME_NEW=$(echo ${FIRST_LINE_WITH_RULE_READY_FOR_TARGET} | sed 's/_rule/_event/g')_${RANDOM_ID_GEN}
            EVENT_BRIDGE_EVENT_NAME=${EVENT_BRIDGE_EVENT_NAME_NEW}
            lambda_add_permission_to_trust_principal ${AWS_LAMBDA_NAME} ${EVENT_BRIDGE_EVENT_NAME} events.amazonaws.com ${FIRST_LINE_WITH_RULE_READY_FOR_TARGET}
            events_add_target_to_rule ${EVENT_TARGET_ID} ${FIRST_LINE_WITH_RULE_READY_FOR_TARGET}
            events_list_of_all_targets
            wait
          fi
        else
          events_create_cron_rule ${EVENT_BRIDGE_RULE_NAME} "${EVENT_SCHEDULE}"
          events_list_of_rules
          lambda_add_permission_to_trust_principal ${AWS_LAMBDA_NAME} ${EVENT_BRIDGE_EVENT_NAME} events.amazonaws.com ${EVENT_BRIDGE_RULE_NAME}
          events_add_target_to_rule ${EVENT_TARGET_ID} ${EVENT_BRIDGE_RULE_NAME}
          events_list_of_all_targets
        fi
      fi
    else
      events_create_cron_rule ${EVENT_BRIDGE_RULE_NAME} "${EVENT_SCHEDULE}"
      events_list_of_rules
      lambda_add_permission_to_trust_principal ${AWS_LAMBDA_NAME} ${EVENT_BRIDGE_EVENT_NAME} events.amazonaws.com ${EVENT_BRIDGE_RULE_NAME}
      events_add_target_to_rule ${EVENT_TARGET_ID} ${EVENT_BRIDGE_RULE_NAME}
      events_list_of_all_targets
    fi
  fi
  if [[ ${RUN_SCRIPT} == yes ]]
  then
    inf "  Invoking Lambda function ${YELLOW}${AWS_LAMBDA_NAME}${RED} (when event bridge will be configured properly this will be removed)"
    aws ${AWS_PROFILE_USE_CHECK[*]} lambda invoke --function-name ${AWS_LAMBDA_NAME} "${LOG}/${AWS_LAMBDA_FUNCTIONS}_${AWS_LAMBDA_NAME}_full.json" --log-type Tail --query 'LogResult' --output text |  base64 -d > "${LOG}/${AWS_LAMBDA_FUNCTIONS}_${AWS_LAMBDA_NAME}.log" 2>&1
    ERROR_CODE="$?"
    INSTANCE_ID_LAMBDA=$(grep "^i-" "${LOG}/${AWS_LAMBDA_FUNCTIONS}_${AWS_LAMBDA_NAME}.log")
    aws ${AWS_PROFILE_USE_CHECK[*]} ec2 describe-instances --instance-ids ${INSTANCE_ID_LAMBDA} > "${TMP}/${AWS_INSTANCES_DETAILS}_${INSTANCE_ID_LAMBDA}_full.json" 2>&1
    AWS_INSTANCE_DETAILS_IP=$(jq -r '.Reservations[].Instances[].PrivateIpAddress' "${TMP}/${AWS_INSTANCES_DETAILS}_${INSTANCE_ID_LAMBDA}_full.json")
    AWS_INSTANCE_DETAILS_PUBLIC_IP=$(jq -r '.Reservations[].Instances[].PublicIpAddress' "${TMP}/${AWS_INSTANCES_DETAILS}_${INSTANCE_ID_LAMBDA}_full.json")
    if [ -z ${AWS_INSTANCE_DETAILS_IP} ] || [[ ${AWS_INSTANCE_DETAILS_IP} == "null" ]]
    then
      error "    Instance hasn't been run, exiting"
      failed
    fi
    if [ -z ${AWS_INSTANCE_DETAILS_PUBLIC_IP} ] || [[ ${AWS_INSTANCE_DETAILS_PUBLIC_IP} == "null" ]]
    then
      inf "    Instance: ${YELLOW}${INSTANCE_ID_LAMBDA}${CYAN} with IP: ${LIME}${AWS_INSTANCE_DETAILS_IP}${CYAN} has just been created"
    else
      inf "  Instance: ${YELLOW}${INSTANCE_ID_LAMBDA}${CYAN} with private IP: ${LIME}${AWS_INSTANCE_DETAILS_IP}${CYAN} (public IP: ${GREEN}${AWS_INSTANCE_DETAILS_PUBLIC_IP}${CYAN}) has just been created"
    fi
    is_instance_up ${INSTANCE_ID_LAMBDA}
    ##AWS Lambda invoking
  fi
done
IFS=${ORIGIFS}

END_DEPLOY_LAMBDA_TIME=$(date +%s.%4N)
DEPLOY_LAMBDA_TIME=$(echo "scale=4; x=(${END_DEPLOY_LAMBDA_TIME} - ${START_DEPLOY_LAMBDA_TIME}); if(x<1) print 0; x" | bc)
